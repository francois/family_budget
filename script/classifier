#!/usr/bin/env ruby
require File.dirname(__FILE__) + "/../config/environment"
require "classifier"

def data_builder(bt)
  returning([]) do |data|
  data << bt.posted_on.to_s(:db).split("-")
  data << bt.name
  data << bt.memo
  data << bt.bank_account.display_account_number
  data << bt.bank_account.account.name
  data << "%.2f" % bt.amount
  end.flatten.compact.join(" ")
end

def find_set(*accounts)
  accounts = accounts.flatten.compact
  target_accounts = accounts.select(&:expense?) + accounts.select(&:income?)

  # If it's a transfer, none of the accounts will be income/expense
  target_accounts.length == 1 ? target_accounts.first.name : nil
end

training_set_size = 0
family = Family.first
bayes  = Classifier::Bayes.new
family.bank_transactions.all(:include => :transfers, :conditions => {:posted_on => (2.years.ago .. 2.weeks.ago)}, :order => "posted_on").each do |bt|
  data = data_builder(bt)

  bt.transfers.each do |t|
    set = find_set(t.debit_account, t.credit_account)
    next if set.blank?

    bayes.add_category(set)
    bayes.train(set, data)
    training_set_size += 1
  end
end

puts "After #{training_set_size} trainings, what does this thing look like?"

unknown, good, bad = 0, 0, 0
family.bank_transactions.all(:include => :transfers, :conditions => {:posted_on => (2.weeks.ago .. Date.today)}, :order => "posted_on").each do |bt|
  data = data_builder(bt)

  t = bt.transfers.first
  actual_set = t.blank? ? nil : find_set(t.debit_account, t.credit_account)

  set = bayes.classify(data)
  printf "%s\n\tReal: %s\n\tAuto: %s\n" % [data, actual_set, set]

  result = if actual_set.blank? then
             unknown += 1
             "Unknown"
           else
             if set.downcase == actual_set.downcase
               good += 1
               "Good"
             else
               bad += 1
               "Bad"
             end
           end

  puts result
end

puts "#{good} good guesses, #{bad} bad guesses, #{unknown} unknown guesses"
