Ext.onReady(function() {
    // Save ExtJS state in cookie for 30 days
    Ext.state.Manager.setProvider(
      new Ext.state.CookieProvider({
          path: <%= app_path.to_json %>,
          secure: true,
          expires: new Date(new Date().getTime()+(1000*60*60*24*30))}));

    // Enable use of quick tips
    Ext.QuickTips.init();

    var dashboardPanel = {
      title: 'Graphiques',
      closable: false,
      items: [{html: '<p>Graphiques</p>'}]};

    var budgetPanel = {
      title: 'Budget',
      closable: false,
      items: [
      {
        xtype: 'panel',
        items: [
        new Ext.form.TextField({
            label: 'Server Response Code:',
            allowBlank: false,
            // This is <INPUT name="">, which ActionController makes available as params[:object][:value]
            name: 'object[value]',
            // Show only if field is empty, kind of a help message
            emptyText:'200s = success, 200f = failure, 400-599 = server response',
            msgTarget: 'qtip',
            listeners: {
              change: function(me, newValue, oldValue) {
                var requestParams = {};
                requestParams[me.name] = me.getValue();

                // Prevent cascading changes until the field has been saved
                me.setDisabled(true);

                // Highlight the field that's saving for the user
                me.getEl().frame();

                Ext.Ajax.request({
                    url: <%= object_url(:id => 42).to_json %>,
                    method: 'put',
                    params: requestParams,
                    callback: function() {
                      // Must do that on all branches, so do it before success/failure callbacks
                      me.setDisabled(false);
                    },
                    success: function(response, options) {
                      // Ext.decode parses a JSON string into a JS object
                      var result = Ext.decode(response.responseText);
                      if (result.success) {
                        // Successful, NOP
                      } else {
                        // Validation failure, ensure field is invalid and show squiggly lines
                        me.markInvalid(result.errors.toString());
                      }
                    },
                    failure: function(response, options) {
                      // Server error, notify user
                      Ext.MessageBox.show({
                          title : 'Value unsaved',
                          msg : "The server returned: '" + response.responseText + "'",
                          buttons: this.OK,
                          closable: true,
                          icon: Ext.MessageBox.ERROR
                        });
                    }
                  });
              }}
          }),
        new Ext.Button({
            text: 'Click Me!'
          })]
      },
      {html: '<p>Budget</p>'}]};

    var bankTransactionsStore = new Ext.data.ArrayStore({
        id: 'bank-transactions-store',
        data: [
          {id: 12311, name: 'VIR. ELEC.', memo: '1231', amount: '-123.22', postedOn: '2009-04-09', bankAccount: 'Compte Francois', transferIds: [212]},
          {id: 12312, name: 'PAIEMENT VISA', memo: '', amount: '-200.00', postedOn: '2009-04-09', bankAccount: 'Compte Maison', transferIds: []},
          {id: 12313, name: 'PAIEMENT VISA', memo: '', amount: '-300.00', postedOn: '2009-05-09', bankAccount: 'Compte Francois', transferIds: []},
          {id: 12314, name: 'PAIEMENT VISA', memo: '', amount: '-180.00', postedOn: '2009-06-09', bankAccount: 'Compte Stefanny', transferIds: []},
        ],
        fields: [
          'id',
          'name',
          'memo',
          {name: 'amount', type: 'float'},
          {name: 'postedOn', type: 'date', dateFormat: 'Y-m-d'}
        ]});

    var bankAccountsStore = new Ext.data.ArrayStore({
        id: 'bank-accounts-store',
        fields: [
          'id', 'name'
        ],
        data: [
          {id: 9291, name: 'Compte Francois'},
          {id: 9292, name: 'Compte Maison'},
          {id: 9293, name: 'Compte Stefanny'}
        ]});

    var bankTransactionsPanel = {
      title: 'Transactions Banquaires',
      closable: false,
      items: new Ext.grid.GridPanel({
          height: 450,
          stripeRows: true,
          bbar: [
          new Ext.PagingToolbar({
              store: bankTransactionsStore,
              pageSize: 400,
              prependButtons: false,
              items: [
              '-',
              {emptyText: 'Période', width: 80, xtype: 'textfield'},
              ' ',
              {
                xtype: 'combo',
                emptyText: 'Tous les comptes',
                store: bankAccountsStore,
                valueField: 'id',
                displayField: 'name',
                forceSelection: false,
                mode: 'local',
                triggerAction: 'all',
                selectOnFocus: true,
                typeAhead: true
              },
              ' ',
              {
                xtype: 'combo',
                emptyText: 'Non-traitées',
                width: 96,
                value: 'unprocessed',
                mode: 'local',
                triggerAction: 'all',
                selectOnFocus: true,
                typeAhead: true,
                store: [
                  ['unprocessed', 'Non-traitées'],
                  ['processed', 'Traitées'],
                  ['all', 'Toutes']]
              },
              ' ',
              {emptyText: 'Texte', xtype: 'textfield'},
              '-',
              {xtype: 'button', text: 'Vider les filtres'}]})],
          columns: [
            {header: 'Description', dataIndex: 'name'},
            {header: 'Description', dataIndex: 'memo'},
            {header: 'Montant', renderer: 'usMoney', dataIndex: 'amount', align: 'right'},
            {header: 'Date', dataIndex: 'postedOn', align: 'right', sortable: true},
            {header: 'Compte', dataIndex: 'bankAccount', sortable: true}
          ],
          store: bankTransactionsStore
      })};

    // The main panel, where everything is
    var mainPanel = new Ext.TabPanel({
        id: 'main-panel',
        renderTo: Ext.getBody(),
        minTabWidth: 115,
        tabWidth:135,
        enableTabScroll:true,
        autoHeight: true,
        defaults: {autoScroll:true},
        plugins: new Ext.ux.TabCloseMenu(),
        activeTab: 2, // Ensure dashboard is selected on initial render
        items: [
          dashboardPanel, budgetPanel, bankTransactionsPanel]
      });
  });
